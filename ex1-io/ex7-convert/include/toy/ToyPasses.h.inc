/* Autogenerated by mlir-tblgen; don't manually edit */

#ifdef GEN_PASS_DECL
// Generate declarations for all passes.
#define GEN_PASS_DECL_CONVERTTOYTOARITH
#define GEN_PASS_DECL_DCE
#undef GEN_PASS_DECL
#endif // GEN_PASS_DECL

//===----------------------------------------------------------------------===//
// ConvertToyToArith
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_CONVERTTOYTOARITH
struct ConvertToyToArithOptions {
  std::string name;
};
#undef GEN_PASS_DECL_CONVERTTOYTOARITH
#endif // GEN_PASS_DECL_CONVERTTOYTOARITH
#ifdef GEN_PASS_DEF_CONVERTTOYTOARITH
namespace impl {

template <typename DerivedT>
class ConvertToyToArithBase : public ::mlir::OperationPass<> {
public:
  using Base = ConvertToyToArithBase;

  ConvertToyToArithBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  ConvertToyToArithBase(const ConvertToyToArithBase &other) : ::mlir::OperationPass<>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("convert-toy-to-arith");
  }
  ::llvm::StringRef getArgument() const override { return "convert-toy-to-arith"; }

  ::llvm::StringRef getDescription() const override { return "Convert Toy To Arith"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ConvertToyToArith");
  }
  ::llvm::StringRef getName() const override { return "ConvertToyToArith"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ConvertToyToArithBase<DerivedT>)

  ConvertToyToArithBase(const ConvertToyToArithOptions &options) : ConvertToyToArithBase() {
    name = options.name;
  }
protected:
  ::mlir::Pass::Option<std::string> name{*this, "name", ::llvm::cl::desc("help")};
private:
};
} // namespace impl
#undef GEN_PASS_DEF_CONVERTTOYTOARITH
#endif // GEN_PASS_DEF_CONVERTTOYTOARITH

//===----------------------------------------------------------------------===//
// DCE
//===----------------------------------------------------------------------===//
#ifdef GEN_PASS_DECL_DCE
#undef GEN_PASS_DECL_DCE
#endif // GEN_PASS_DECL_DCE
#ifdef GEN_PASS_DEF_DCE
namespace impl {

template <typename DerivedT>
class DCEBase : public ::mlir::OperationPass<toy::FuncOp> {
public:
  using Base = DCEBase;

  DCEBase() : ::mlir::OperationPass<toy::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  DCEBase(const DCEBase &other) : ::mlir::OperationPass<toy::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("toy-dce");
  }
  ::llvm::StringRef getArgument() const override { return "toy-dce"; }

  ::llvm::StringRef getDescription() const override { return "dce"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("DCE");
  }
  ::llvm::StringRef getName() const override { return "DCE"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Return the dialect that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(DCEBase<DerivedT>)

protected:
private:
};
} // namespace impl
#undef GEN_PASS_DEF_DCE
#endif // GEN_PASS_DEF_DCE
#ifdef GEN_PASS_REGISTRATION

//===----------------------------------------------------------------------===//
// ConvertToyToArith Registration
//===----------------------------------------------------------------------===//

inline void registerConvertToyToArith() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return toy::createConvertToyToArithPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerConvertToyToArithPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return toy::createConvertToyToArithPass();
  });
}

//===----------------------------------------------------------------------===//
// DCE Registration
//===----------------------------------------------------------------------===//

inline void registerDCE() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return toy::createDCEPass();
  });
}

// Old registration code, kept for temporary backwards compatibility.
inline void registerDCEPass() {
  ::mlir::registerPass([]() -> std::unique_ptr<::mlir::Pass> {
    return toy::createDCEPass();
  });
}

//===----------------------------------------------------------------------===//
//  Registration
//===----------------------------------------------------------------------===//

inline void registerPasses() {
  registerConvertToyToArith();
  registerDCE();
}
#undef GEN_PASS_REGISTRATION
#endif // GEN_PASS_REGISTRATION
// Deprecated. Please use the new per-pass macros.
#ifdef GEN_PASS_CLASSES

template <typename DerivedT>
class ConvertToyToArithBase : public ::mlir::OperationPass<> {
public:
  using Base = ConvertToyToArithBase;

  ConvertToyToArithBase() : ::mlir::OperationPass<>(::mlir::TypeID::get<DerivedT>()) {}
  ConvertToyToArithBase(const ConvertToyToArithBase &other) : ::mlir::OperationPass<>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("convert-toy-to-arith");
  }
  ::llvm::StringRef getArgument() const override { return "convert-toy-to-arith"; }

  ::llvm::StringRef getDescription() const override { return "Convert Toy To Arith"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("ConvertToyToArith");
  }
  ::llvm::StringRef getName() const override { return "ConvertToyToArith"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(ConvertToyToArithBase<DerivedT>)

protected:
  ::mlir::Pass::Option<std::string> name{*this, "name", ::llvm::cl::desc("help")};
};

template <typename DerivedT>
class DCEBase : public ::mlir::OperationPass<toy::FuncOp> {
public:
  using Base = DCEBase;

  DCEBase() : ::mlir::OperationPass<toy::FuncOp>(::mlir::TypeID::get<DerivedT>()) {}
  DCEBase(const DCEBase &other) : ::mlir::OperationPass<toy::FuncOp>(other) {}

  /// Returns the command-line argument attached to this pass.
  static constexpr ::llvm::StringLiteral getArgumentName() {
    return ::llvm::StringLiteral("toy-dce");
  }
  ::llvm::StringRef getArgument() const override { return "toy-dce"; }

  ::llvm::StringRef getDescription() const override { return "dce"; }

  /// Returns the derived pass name.
  static constexpr ::llvm::StringLiteral getPassName() {
    return ::llvm::StringLiteral("DCE");
  }
  ::llvm::StringRef getName() const override { return "DCE"; }

  /// Support isa/dyn_cast functionality for the derived pass class.
  static bool classof(const ::mlir::Pass *pass) {
    return pass->getTypeID() == ::mlir::TypeID::get<DerivedT>();
  }

  /// A clone method to create a copy of this pass.
  std::unique_ptr<::mlir::Pass> clonePass() const override {
    return std::make_unique<DerivedT>(*static_cast<const DerivedT *>(this));
  }

  /// Register the dialects that must be loaded in the context before this pass.
  void getDependentDialects(::mlir::DialectRegistry &registry) const override {
    
  }

  /// Explicitly declare the TypeID for this class. We declare an explicit private
  /// instantiation because Pass classes should only be visible by the current
  /// library.
  MLIR_DEFINE_EXPLICIT_INTERNAL_INLINE_TYPE_ID(DCEBase<DerivedT>)

protected:
};
#undef GEN_PASS_CLASSES
#endif // GEN_PASS_CLASSES
